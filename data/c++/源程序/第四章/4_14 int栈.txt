//4.14 int栈
#include<iostream>
using std::cout;
using std::endl;

class IntStack
{
public:	
   explicit IntStack(unsigned=10);//构造函数建立空栈
   IntStack(const IntStack &);//拷贝构造函数
	~IntStack();//析构函数
   IntStack & operator=(const IntStack &);//赋值函数
	bool is_empty();//测试栈是否为空
	void push(int);//入栈
	bool pop();//退栈
	bool get_top(int &);//读取栈顶元素
private:
   unsigned size;//栈的容积
	unsigned top;//栈顶位置
	int *ptr;//动态内存的指针
};

IntStack::IntStack(unsigned n)
{
	size=n>0?n:10;
	top=0;
	ptr=new int[size];
}
IntStack::IntStack(const IntStack &other)
{
	size=other.size;
	top=other.top;
	ptr=new int[size];
	for(unsigned i=0;i<top;++i)
		ptr[i]=other.ptr[i];
}
IntStack::~IntStack()
{
	delete []ptr;
}
IntStack & IntStack::operator=(const IntStack &other)
{
	if(this!=&other)
	{
		delete []ptr;
		size=other.size;
	    top=other.top;
	    ptr=new int[size];
	    for(unsigned i=0;i<top;++i)
		    ptr[i]=other.ptr[i];
	}
	return *this;
}
bool IntStack::is_empty()
{
	return top==0;
}
void IntStack::push(int value)
{
	if(top==size)//栈已满，需要增加空间
	{
		int *newptr=new int[2*size];//申请2倍的空间
		for(unsigned i=0;i<top;++i)
		    newptr[i]=ptr[i];
		size*=2;
		delete []ptr;
		ptr=newptr;
	}
	ptr[top++]=value;
}
bool IntStack::pop()
{
	if(is_empty()) 
		return false;
	--top;
	return true;
}
bool IntStack::get_top(int & value)
{
	if(is_empty()) 
		return false;
	value=ptr[top-1];
	return true;
}

int main()
{
   IntStack s1(4);
	for(int i=1;i<=6;++i)
		s1.push(i);
	IntStack s2(s1);//测试拷贝构造函数
	IntStack s3;
	s3=s1;//测试赋值函数

	int value;
	while(s1.get_top(value))
	{	
		s1.pop();
		cout<<value<<" ";
	}
	cout<<endl<<"s1已清空"<<endl;

	while(s2.get_top(value))
	{	
		s2.pop();
		cout<<value<<" ";
	}
	cout<<endl<<"s2已清空"<<endl;

	while(s3.get_top(value))
	{	
		s3.pop();
		cout<<value<<" ";
	}
	cout<<endl<<"s3已清空"<<endl;

	return 0;
}
